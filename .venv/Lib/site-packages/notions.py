from enum import Enum
import uuid

class NotionType(Enum):
    NONE = "NONE"
    BOOLEAN = "BOOLEAN"
    DATE = "DATE"
    DURATION = "DURATION"
    ENUMERATION = "ENUMERATION"
    FLOAT = "FLOAT"
    INTEGER = "INTEGER"
    IRI = "IRI"
    STRING = "STRING"


class NotionUnit(Enum):
    NONE = "NONE"
    DAY = "DAY"
    DEGREE = "DEGREE"
    MM = "MM"
    MONTH = "MONTH" 
    U = "U"
    WEEK = "WEEK"
    YEAR = "YEAR"
 
class NotionFrame:
    frames = dict()

    def __init__(self, id: str, parameter: str, type: NotionType, unit: NotionUnit, 
                 derived_from: list[str],
                 converter_code: str, converter: callable, 
                 discriminator_code: str, discriminator: callable) -> None:
        self.id = id
        self.parameter = parameter
        self.type = type
        self.unit = unit
        if len(derived_from) > 0:
            nfs = [NotionFrame.get_notion_frame(nf_id) for nf_id in derived_from]
            dnfs = self.find_derived_frames(nfs)
            nfs += dnfs
            keys = [nf.id for nf in nfs]
            values = [nf for nf in nfs]
            self.derived_from = {key: value for key, value in zip(keys, values)}
        else:
            self.derived_from = dict()
        self.converter_code = converter_code
        self.converter = converter
        self.discriminator_code = discriminator_code
        self.discriminator = discriminator
        NotionFrame.frames[id] = self

    def find_derived_frames(self, nfs: list[object]) -> list[object]:
        def get_df(nf, dnfs):
            if nf.derived_from:
                for dnf in nf.derived_from.values():
                    dnfs.update(get_df(dnf, dnfs))
            else:
                dnfs.add(nf)
                return dnfs
        dnfs = set()
        for nf in nfs:
            if nf.derived_from.values():
                tmp = get_df(nf, dnfs)
                if tmp:
                    dnfs.update(tmp)
        return list(dnfs)

    def get_notion_frame(id: str) -> object:
        ### get notion frame by id ###
        return NotionFrame.frames.get(id)
    
    def get_all_notion_frames() -> list[object]:
        ### get all notion frames ###
        return [nf for nf in NotionFrame.frames.values()]


class NotionValue:
    values = dict()

    def __init__(self, frame: NotionFrame, args: list[dict], id: str = None) -> None:
        if id is None:
            self.id = f"{uuid.uuid4()}"
        else:
            self.id = id
        self.frame = frame
        self.args = args
        self.property = self.frame.converter(args)
        self.classification = self.frame.discriminator(self.property)
        NotionValue.values[id] = self

    def get_derived_notion_values(self) -> list[object]:
        if self.frame.derived_from:
            dnvs = []
            for dnf in self.frame.derived_from:
                if dnf in self.args:
                    dnv = self.args[dnf]
                    if isinstance(dnv, list):
                        dnvs.extend(dnv)
                    else:
                        dnvs.append(dnv)
            return dnvs
        return []
    
    def __repr__(self) -> str:
        return f"NotionValue(frame=\"{self.frame.id}\", args={self.args}, property={self.property}, classification={self.classification})"


class PerceptiveFrame:
    frames = dict()

    def __init__(self, id: str, notion_frame_names: list[str], discriminator_code: str = None, discriminator: callable = None) -> None:
        if id is None:
            self.id = f"{uuid.uuid4()}"
        else:
            self.id = id
        nfs = [NotionFrame.get_notion_frame(nf_name) for nf_name in notion_frame_names]
        keys = [nf.id for nf in nfs]
        values = [nf for nf in nfs]
        self.notion_frames = {key: value for key, value in zip(keys, values)}
        self.discriminator_code = discriminator_code
        self.discriminator = discriminator
        PerceptiveFrame.frames[id] = self
    
    def get_perceptive_frame(id: str) -> object:
        ### get perceptive_frame by id ###
        if PerceptiveFrame.frames.get(id):
            return PerceptiveFrame.frames[id]
        return None
    
    def get_all_perceptive_frames() -> list[object]:
        ### get all perceptive_frames ###
        return [pf for pf in PerceptiveFrame.frames.values()]


class PerceptiveFrameInstance:
    values = dict()

    def __init__(self, id: str, perceptiveFrameId: str, notion_values: list[object]) -> None:
        self.id = id
        self.perceptive_frame = None
        if perceptiveFrameId:
            self.perceptive_frame = PerceptiveFrame.get_perceptive_frame(perceptiveFrameId)
        self.notion_values = notion_values
        PerceptiveFrameInstance.values[id] = self

    def get_all_notion_values(self) -> list[NotionValue]:
        ### get recursively all derived notion values ###
        def get_derived_notion_values(nv: NotionValue) -> list[NotionValue]:
            dnvs = nv.get_derived_notion_values()
            for dnv in dnvs:
                dnvs.extend(get_derived_notion_values(dnv)) 
            return dnvs
        
        dnvs: list[NotionValue] = []
        for nv in self.notion_values:
            dnvs.extend(get_derived_notion_values(nv))
        return dnvs
    
    def get_perceptive_frame_instance(id: str) -> object:
        ### get perceptive_frame_instance by id ###
        return PerceptiveFrameInstance.values.get(id)
    
    def get_all_perceptive_frame_instances() -> list[object]:
        ### get all perceptive_frame_instances ###
        return [pfi for pfi in PerceptiveFrameInstance.values.values()]
    
def create_notion_frame(id: str, parameter: str, type: NotionType = None, unit: NotionUnit = None,
        derivedFrom: list[str] = None, converter: str = None, discriminator: str = None) -> NotionFrame:
    if not derivedFrom:
        derivedFrom = []

    if not converter:
        converter = """def converter_function(args):\n    return None"""
    d = {}
    exec(converter, d, d)
    converter_function = d[list(d)[-1]]
    
    if not discriminator:
        discriminator = """def discriminator_function(args):\n    return None"""
    exec(discriminator, d, d)
    discriminator_function = d[list(d)[-1]]
    
    return NotionFrame(id = id, parameter = parameter, type = type, unit = unit, 
                       derived_from = derivedFrom,
                       converter_code = converter, converter = converter_function, 
                       discriminator_code = discriminator, discriminator = discriminator_function)

def create_perceptive_frame(id: str, notionFrameIds: list[str], discriminator: str = None) -> PerceptiveFrame:
    if not discriminator:
        discriminator = """def discriminator_function(notion_frames, notion_values):\n    return None"""
    d = {}
    exec(discriminator, d, d)
    discriminator_function = d[list(d)[-1]]
    return PerceptiveFrame(id = id, notion_frame_names = notionFrameIds, discriminator_code = discriminator, discriminator = discriminator_function)

def create_perceptive_frame_instance(perceptiveFrameInstanceInput: dict) -> PerceptiveFrameInstance:
    if "perceptiveFrameId" not in perceptiveFrameInstanceInput:
        perceptiveFrameInstanceInput["perceptiveFrameId"] = None
    for item in perceptiveFrameInstanceInput["notionValueInputs"]:
            if not "derivedFrom" in item:
                item["derivedFrom"] = []
    nvs: list[NotionValue] = []
    for nvi in perceptiveFrameInstanceInput["notionValueInputs"]:
        nvs.append(create_notion_value(notionValueInput=nvi, derivedFrom=nvi["derivedFrom"]))
    for nvid in perceptiveFrameInstanceInput.get("notionValueRefs"):
        nvs.append(NotionValue.values.get(nvid))
    return PerceptiveFrameInstance(id = perceptiveFrameInstanceInput["id"], perceptiveFrameId = perceptiveFrameInstanceInput["perceptiveFrameId"], notion_values = nvs)

def create_notion_value(notionValueInput: dict, derivedFrom: list[dict] = [], derivedFromRef: list[str] = [], id: str = None) -> NotionValue:
    nf: NotionFrame = NotionFrame.get_notion_frame(notionValueInput["notionFrameId"])
    args = notionValueInput["args"]

    arg_keys = [arg['key'] for arg in args]
    arg_values = [arg['value'] for arg in args]        
    arg_dict = {key: value for key, value in zip(arg_keys, arg_values)}
    for key in arg_dict.keys():
        if NotionFrame.get_notion_frame(key):
            arg_dict[key] = NotionValue.get_notion_value(arg_dict[key])
    arg_dict[nf.id] = nf

    if derivedFrom:
        for item in derivedFrom:
            if not "derivedFrom" in item:
                item["derivedFrom"] = []
        keys = [item["notionFrameId"] for item in derivedFrom]
        values = [create_notion_value(notionValueInput={"notionFrameId": item["notionFrameId"],"args": item["args"]}, derivedFrom=item["derivedFrom"]) for item in derivedFrom]
        derived = {key: value for key, value in zip(keys, values)}
        if len(derived) < len(values):
            derived = {keys[0]: values}
        args = arg_dict | derived
    else:
        args = arg_dict
    
    if derivedFromRef:
        keys = [id for id in derivedFromRef]
        values = [NotionValue.values[id] for id in derivedFromRef]
        derived = {key: value for key, value in zip(keys, values)}
        if len(derived) < len(values):
            derived = {keys[0]: values}
        args = arg_dict | derived

    return NotionValue(frame = nf, args = args, id = id)
